#!/usr/bin/env bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Variables

declare -r origin="git@github.com:mattkingston/dotfiles.git"

if [[ -d "$(dirname $BASH_SOURCE[0])/os" ]]; then
    declare -r tarballUrl="$(dirname $BASH_SOURCE[0])"
else
    declare -r tarballUrl="http://github.com/mattkingston/dotfiles/tarball/master"
fi

if [[ -d "$(dirname $BASH_SOURCE[0])/os" ]]; then
   declare -r installDir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
   declare extracted=1
else
    declare -r installDir="$HOME/projects/dotfiles"
    declare extracted=0
fi

declare -a argumentList=( "$@" )
declare argumentListLength=$(expr ${#argumentList[@]} - 1)
declare isProxySupplied="NO"
declare suppliedProxy=""
declare DEBUG="NO"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Definitions

mask_string() {
    local raw="$1"
    echo ${raw:0:1}$( echo "${raw:1: -1}" | tr [:print:] \* )${raw: -1}
}

full_mask_string() {
    local raw="$1"
    echo $raw | tr [:print:] \*
}

is_http() {
    local url="$1"

    [[ "$url" == "http"* ]] \
        && return 0

    return 1
}

is_archive() {
    local file="$1"

    [[ -f "$file" && "$file" == *".tar"* ]] \
        && return 0

    return 1
}

get_os() {
    local osName="$(uname -s)"
    local os=''

    if [ "$osName" == "Darwin" ]; then
        os='osx'
    elif [ "$osName" == "Linux" ] && [ -e "/etc/lsb-release" ]; then
        os='ubuntu'
    else
        os="$osName"
    fi

    printf "%s" "$os"
}

download() {
    local url="$1"
    local archive="$2"

    if command -v 'curl' &> /dev/null; then
        curl -LksSo "$archive" "$url" &> /dev/null

        return $?
    elif command -v 'wget' &> /dev/null; then
        wget --no-check-certificate -qO "$archive" "$url" &> /dev/null
        return $?
    fi

    return 1
}

extract() {
    local archive="$1"
    local outputDir="$2"

    if command -v 'tar' &> /dev/null; then
        tar -zxf "$archive" --strip-components 1 -C "$outputDir"
        return $?
    fi

    return 1
}

download_and_extract() {
    local url="$1"
    local tmpFile="$2"
    local tmpDir="$3"

    if is_http "$url"; then
        if download "$url" "$tmpFile"; then
            if extract "$tmpFile" "$tmpDir"; then
                return 0
            fi
        fi
    else
        if is_archive "$url"; then
            cp "$url" "$tmpFile"

            if extract "$tmpFile" "$tmpDir"; then
                return 0
            fi
        elif [[ -d "$url" ]]; then
            if cp -r "$url/." "$tmpDir/"; then
                return 0
            fi
        fi
    fi

    return 1
}

main() {

    declare workingDirectory="$(pwd)" \
        && cd "$(dirname $BASH_SOURCE[0])"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    local tmpFile="$(mktemp /tmp/XXXXX)"
    local tmpDir="$(mktemp -d /tmp/XXXXX)"

    local newInstallDir="$installDir"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Download dotfiles to a temporary location

    if [[ "$extracted" -eq 1 ]]; then
        source "$installDir/shell/bash_utils"
    else
        download_and_extract "$tarballUrl" "$tmpFile" "$tmpDir"
        source "$tmpDir/shell/bash_utils"
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    verify_os || exit 1

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    ask_for_sudo

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    if [[ "$extracted" -eq 1 ]]; then
        # The tarball has been downloaded and extracted already
        
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        newInstallDir="$installDir"

        cd "$newInstallDir"
        
    else

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        # Ask where to store the dotfiles binaries

        ask_for_confirmation "Do you want to store the base dotfiles in '$newInstallDir'?"

        if ! answer_is_yes; then
          newInstallDir=''

          while [[ -z "$newInstallDir" || "$newInstallDir" == "" ]]; do
            ask 'Please specify another location for the base dotfiles (absolute path): '

            newInstallDir="$(get_answer)"
          done
        fi

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        # Request overwrite of the directory

        while [[ -e "$newInstallDir" ]]; do
          ask_for_confirmation "'$newInstallDir' already exists, do you want to overwrite it?"

          if answer_is_yes; then
            rm -rf "$newInstallDir"
            break
          else
            newInstallDir=''

            while [[ -z "$newInstallDir" || "$newInstallDir" == "" ]]; do
              ask 'Please specify another location for the base dotfiles (absolute path): '

              newInstallDir="$(get_answer)"

              if [[ -z "$newInstallDir" || "$newInstallDir" == "" ]]; then
                newInstallDir="$installDir"
              fi
            done

          fi
        done

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        # Move the downloaded dotfiles to the selected directory

        if [[ ! -e "$newInstallDir" ]]; then
          mkdir -p "$(dirname $newInstallDir)"

          mv "$tmpDir" "$newInstallDir"

          print_result $? "Create '$newInstallDir'"
        fi

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        # Remove archive

        rm -rf "$tmpFile"

        print_result  $? "Remove archive $(print_in_grey "($tmpFile)")"

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        cd "$newInstallDir"

    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    print_info 'Create directories'

    ask_for_confirmation 'Do you want the additional directories to be created?'

    if answer_is_yes; then
        source ./os/create_directories.sh
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    print_info 'Create symbolic links'

    ask_for_confirmation 'Do you want to create dotfile symlinks?'

    if answer_is_yes; then
        source ./os/create_symbolic_links.sh
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    if [ ! -f "$HOME/.bash.local" ] || [ ! -f "$HOME/.bash.local.proxy" ]; then
        print_info 'Create bash locals'
        source ./os/create_bash_locals.sh
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    source "$HOME/.bash_profile"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    print_info 'Proxy'

    if [[ -n $suppliedProxy && "$isProxySupplied" == "YES" ]]; then
        parse_supplied_proxy "$suppliedProxy"

        ask_if_proxy_settings_correct

        if answer_is_yes; then
            save_proxy_settings
        else
            ask_for_confirmation 'Do you want to set up Proxy details now?'

            if answer_is_yes; then
                ask_proxy_settings
                save_proxy_settings
            fi
        fi

    else

        ask_for_confirmation 'Do you want to set up Proxy details now?'

        if answer_is_yes; then
            ask_proxy_settings
            save_proxy_settings
        fi

    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    source "$HOME/.bash_profile"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    print_info 'Install applications'

    ask_for_confirmation 'Do you want to install the applications/command line tools?'

    if answer_is_yes; then
        source ./os/install_applications.sh
        source ./os/install_node_versions.sh
        source ./os/install_npm_packages.sh
        source ./os/install_ruby_versions.sh

        if [[ "$(get_os)" == 'osx' ]]; then
            source ./os/install_vagrant.sh
        fi
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    print_info 'Set preferences'

    ask_for_confirmation 'Do you want to set the custom preferences?'

    if answer_is_yes; then
        source ./os/set_preferences.sh
    fi
    
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    if cmd_exists 'git'; then
        if [[ "$(git config --get remote.origin.url)" != "$origin" ]]; then
            print_info 'Initialize Git repository'

            source ./os/initialize_git_repository.sh "$origin"
        fi

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        if is_git_repository; then
            ssh -T git@github.com &> /dev/null

            if [[ $? -ne 1 ]]; then
                print_info 'Set up Github SSH keys'

                ask_for_confirmation 'Do you want to set up Github SSH keys?'

                if answer_is_yes; then
                    source ./os/setup_github_ssh_keys.sh

                    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

                    print_info 'Update content'

                    ask_for_confirmation 'Do you want to update the content from the "dotfiles" directory?'

                    if answer_is_yes; then
                        echo "Update content"
                        #source ./os/update_content.sh
                    fi
                fi
            fi
        fi

    fi

    cd "$newInstallDir"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    if cmd_exists 'vim'; then
        print_info 'Install/Update Vim plugins'

        ask_for_confirmation 'Do you want to install/update the Vim plugins?'

        if answer_is_yes; then
            source ./os/install_vim_plugins.sh
        fi
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    print_info 'GitHub'

    ask_for_confirmation 'Do you want to set up GitHub credentials now?'

    if answer_is_yes; then
        while [[ -z "$githubName" || "$githubName" == "" ]]; do
            ask 'Please enter your name (not user name)'
            githubName="$(get_answer)"
        done

        while [[ -z "$githubUsername" || "$githubUsername" == "" ]]; do
            ask 'Please enter your GitHub username'
            githubUsername="$(get_answer)"
        done

        while [[ -z "$githubEmail" || "$githubEmail" == "" ]]; do
            ask 'Please enter your GitHub email'
            githubEmail="$(get_answer)"
        done

        local githubConfig='
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        # GitHub

        export GITHUB_USERNAME="'$githubUsername'"
        export GITHUB_NAME="'$githubName'"
        export GITHUB_EMAIL="'$githubEmail'"

        ' # END declare=githubConfig

        append_to_file_once "$HOME/.bash.local" "$githubConfig"

        print_in_white "\n    GitHub variables have been set in $HOME/.bash.local. You can change these any time by modifying this file\n\n"
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    print_info 'Restart'

    if [ "$(whoami)" == "vagrant" ]; then

        print_success "Provisioning complete\n"
        print_info 'An updated shell is required. Please exit from this Vagrant VM and re-ssh in, or simply run `source ~/.bash_profile`'

    else

        ask_for_confirmation 'Do you want to restart?'

        if answer_is_yes; then
            source ./os/restart.sh
        else
            print_success "Provisioning complete\n"
        fi
    fi

    cd "$workingDirectory"

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Main

for i in ${argumentList[@]}; do
    if [ "$i" == '--proxy' ]; then
        isProxySupplied="YES"
    fi
done

for i in `seq 0 $argumentListLength`; do
    if [[ "${argumentList[$i]}" == '--proxy' && $i+1 -le "$argumentListLength" ]]; then
        suppliedProxy="${argumentList[$i+1]}"
    fi

    if [[ "${argumentList[$i]}" == '--debug' ]]; then
        DEBUG="YES"
    fi
done

main

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Cleanup

unset main

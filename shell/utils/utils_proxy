#!/bin/bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Proxy Definitions

declare proxyUser=""
declare proxyPass=""

declare proxyDomain=""
declare proxyPort=""
declare proxyUrl=""

declare httpProxyDomain=""
declare httpsProxyDomain=""
declare allProxyDomain=""

declare httpProxyPort=""
declare httpsProxyPort=""
declare allProxyPort=""

declare httpProxyUrl=""
declare httpsProxyUrl=""
declare allProxyUrl=""

declare maskedProxyPass=""

declare proxyUserPass=""

declare maskedProxyUserPass=""

declare maskedHttpProxy=""
declare maskedHttpsProxy=""
declare maskedAllProxy=""

reset_proxy_vars() {
    proxyUser=""
    proxyPass=""

    proxyDomain=""
    proxyPort=""
    proxyUrl=""

    httpProxyDomain=""
    httpsProxyDomain=""
    allProxyDomain=""

    httpProxyPort=""
    httpsProxyPort=""
    allProxyPort=""

    httpProxyUrl=""
    httpsProxyUrl=""
    allProxyUrl=""

    maskedProxyPass=""

    proxyUserPass=""

    maskedProxyUserPass=""

    maskedHttpProxy=""
    maskedHttpsProxy=""
    maskedAllProxy=""
}

ask_proxy_user() {
    ask 'Please enter your proxy username'
    proxyUser="$(get_answer)"
}

ask_proxy_pass() {
    ask_silent 'Please enter your proxy password'
    proxyPass="$(get_answer)"

    printf "$(full_mask_string $proxyPass)\n"

    set_proxy_pass_masked
    set_proxy_user_and_pass
}

set_proxy_pass_masked() {
    maskedProxyPass="$(mask_string $proxyPass)"
}

set_proxy_user_and_pass() {
    if [ -n "$proxyUser" ]; then
        if [ -n "$proxyPass" ]; then
            proxyUserPass="$proxyUser:$proxyPass@"
            maskedProxyUserPass="$proxyUser:$maskedProxyPass@"
        else
            proxyUserPass="$proxyUser@"
            maskedProxyUserPass="$proxyUser@"
        fi
    fi
}

ask_proxy_domain() {
    ask_for_confirmation "Are there different domains for HTTP and HTTPS proxies?"

    if answer_is_yes; then

        ask 'Please enter the HTTP proxy domain/IP'
        httpProxyDomain="$(get_answer)"

        ask 'Please enter the HTTPS proxy domain/IP'
        httpsProxyDomain="$(get_answer)"

        ask 'Please enter any other proxy domain/IP'
        allProxyDomain="$(get_answer)"

    else

        while [[ -z "$proxyDomain" || "$proxyDomain" == "" ]]; do
            ask 'Please enter the proxy domain/IP'
            proxyDomain="$(get_answer)"
        done

    fi
}

ask_proxy_port() {
    ask_for_confirmation "Are there different ports for HTTP and HTTPS proxies?"

    if answer_is_yes; then

        ask 'Please enter the HTTP proxy port'
        httpProxyPort="$(get_answer)"

        ask 'Please enter the HTTPS proxy port'
        httpsProxyPort="$(get_answer)"

        ask 'Please enter any other proxy port'
        allProxyPort="$(get_answer)"

    else

        ask 'Please enter the proxy port'
        proxyPort="$(get_answer)"

    fi

    set_proxy_url
}

set_proxy_url() {

    # Domain

    if [ -n "$proxyDomain" ]; then
        proxyUrl="$proxyDomain"
    fi

    if [ -n "$httpProxyDomain" ]; then
        httpProxyUrl="$httpProxyDomain"
    fi

    if [ -n "$httpsProxyDomain" ]; then
        httpsProxyUrl="$httpsProxyDomain"
    fi

    if [ -n "$allProxyDomain" ]; then
        allProxyUrl="$allProxyDomain"
    fi

    # Concat port

    if [ -n "$proxyPort" ]; then
        proxyUrl="$proxyUrl:$proxyPort"
    fi

    if [ -n "$httpProxyPort" ]; then
        httpProxyUrl="$httpProxyUrl:${httpProxyPort:-$proxyPort}"
    fi

    if [ -n "$httpsProxyPort" ]; then
        httpsProxyUrl="$httpsProxyUrl:${httpsProxyPort:-$proxyPort}"
    fi

    if [ -n "$allProxyPort" ]; then
        allProxyUrl="$allProxyUrl:${allProxyPort:-$proxyPort}"
    fi

}

concat_proxy_settings() {
    httpProxy="http://${proxyUserPass}${httpProxyUrl:-$proxyUrl}"
    httpsProxy="http://${proxyUserPass}${httpsProxyUrl:-$proxyUrl}"
    allProxy="http://${proxyUserPass}${allProxyUrl:-$proxyUrl}"

    maskedHttpProxy="http://${maskedProxyUserPass}${httpProxyUrl:-$proxyUrl}"
    maskedHttpsProxy="http://${maskedProxyUserPass}${httpsProxyUrl:-$proxyUrl}"
    maskedAllProxy="http://${maskedProxyUserPass}${allProxyUrl:-$proxyUrl}"
}

ask_if_proxy_settings_correct() {
    ask_for_confirmation "Proxy variables are:$(print_in_white "\n\n      HTTP_PROXY=$maskedHttpProxy\n      HTTPS_PROXY=$maskedHttpsProxy\n      ALL_PROXY=$maskedAllProxy")\n\n      $(print_in_blue "Are these correct?")"
}

ask_proxy_settings() {
    ask_proxy_user
    ask_proxy_pass
    ask_proxy_domain
    ask_proxy_port

    concat_proxy_settings

    ask_if_proxy_settings_correct

    if ! answer_is_yes; then
        reset_proxy_vars

        ask_for_confirmation "Do you want to try setting the proxy settings again?"

        if answer_is_yes; then
            ask_proxy_settings
        fi
    fi
}

save_proxy_settings() {
    if [ -n "$httpProxy" ]; then
        local proxyConfig='
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        # Proxy

        export PROXY_USER="'$proxyUser'"
        export PROXY_PASS="'$proxyPass'"

        export HTTP_PROXY="'$httpProxy'"
        export HTTPS_PROXY="'$httpsProxy'"
        export ALL_PROXY="'$allProxy'"

        export http_proxy="'$httpProxy'"
        export https_proxy="'$httpsProxy'"
        export all_proxy="'$allProxy'"

        ' # END declare=proxyConfig

        echo "$proxyConfig" > "$HOME/.bash.local.proxy"

        print_in_white "\n    Proxy variables have been saved to $HOME/.bash.local.proxy.\n"

        # TODO - Include this bit in the bash proxy watcher
        if [ "$(get_os)" == 'ubuntu' ]; then
            echo 'Acquire::http::Proxy "'$httpProxy'";' | sudo tee "/etc/apt/apt.conf.d/01proxy" > /dev/null 2>&1
        fi

        print_in_white "\n    Proxy set: /etc/apt/apt.conf.d/01proxy.\n"

        if cmd_exists 'npm'; then
            # TODO - Include this bit in the bash proxy watcher
            execute_quietly "npm config set proxy $HTTP_PROXY" "NPM HTTP Proxy"
            execute_quietly "npm config set https-proxy $HTTPS_PROXY" "NPM HTTPS Proxy"

            print_in_white "\n    Proxy set: $HOME/.npmrc.\n\n"
        fi

        if [[ -n "$RVM_DIR" && -d "$RVM_DIR" ]]; then
            # TODO - Include this bit in the bash proxy watcher
            append_to_file_once "$HOME/.gemrc" "http-proxy: $HTTP_PROXY"
            append_to_file_once "$HOME/.gemrc" "https-proxy: $HTTPS_PROXY"

            print_in_white "\n    Proxy set: $HOME/.gemrc.\n"
        fi

        export PROXY_USER="'$proxyUser'"
        export PROXY_PASS="'$proxyPass'"

        export HTTP_PROXY="'$httpProxy'"
        export HTTPS_PROXY="'$httpsProxy'"
        export ALL_PROXY="'$allProxy'"

        export http_proxy="'$httpProxy'"
        export https_proxy="'$httpsProxy'"
        export all_proxy="'$allProxy'"
    fi
}

parse_supplied_proxy() {
    local suppliedProxy="$1"

    if [[ $suppliedProxy =~ ^https?://[^:]+:[^@]+@[^:]+:[0-9]{,4}$ ]]; then
        proxyComplex="$(echo $suppliedProxy | cut -d'/' -f3)"

        proxyUser="$(echo $proxyComplex | cut -d':' -f1)"
        proxyPass="$(echo $proxyComplex | cut -d':' -f2 | cut -d'@' -f1)"

        set_proxy_pass_masked
        set_proxy_user_and_pass

        proxyDomain="$(echo $proxyComplex | cut -d':' -f2 | cut -d'@' -f2)"
        proxyPort="$(echo $proxyComplex | cut -d':' -f3)"

    elif [[ $suppliedProxy =~ ^https?://[^:]+:[0-9]{,4}$ ]]; then
        proxyComplex="$(echo $suppliedProxy | cut -d'/' -f3)"
        proxyDomain="$(echo $proxyComplex | cut -d':' -f1 | cut -d'@' -f2)"
        proxyPort="$(echo $proxyComplex | cut -d':' -f2)"
    fi

    set_proxy_url

    concat_proxy_settings

    if [ "$DEBUG" == "YES" ]; then
        echo '$proxyComplex='$proxyComplex
        echo '$proxyUser='$proxyUser
        echo '$proxyPass='$proxyPass

        echo '$proxyUserPass='$proxyUserPass
        echo '$maskedProxyUserPass='$maskedProxyUserPass

        echo '$proxyDomain='$proxyDomain
        echo '$proxyPort='$proxyPort

        echo '$proxyUrl='$proxyUrl

        echo '$httpProxy='$httpProxy
        echo '$maskedHttpProxy='$maskedHttpProxy
    fi
}

change_proxy() {
    ask_proxy_settings
    save_proxy_settings
}